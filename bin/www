#!/usr/bin/env node

// Module dependencies.
var app = require('../app');
var debug = require('debug')('nodechat:server');
var http = require('http');


// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Get firebase instances
var firebase = require('firebase');
var db = firebase.database();

// Set up a socket.io instance
var io = require('socket.io')(server);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// Returns a timestamp string
function createTimestamp() {
  var d = new Date();
  var h = d.getHours();
  var m = d.getMinutes();
  if (h < 10) h = '0' + h;
  if (m < 10) m = '0' + m;
  return h + ':' + m;
}

/**
 * Handle socket.io stuff
 *
 * This handles all the logic regarding
 * user interaction with the websocket
 * including connection, sending messages etc.
 */
io.on('connection', (socket) => {

  // Join all own rooms when client is connected
  socket.on('init', (rooms) => {
    for (var room in rooms) {
      if (rooms.hasOwnProperty(room)) {
        socket.join(rooms[room]);
      }
    }
  });


  /**
   * if the data parameter is not empty, first create
   * a new unique identifier for the chatroom Then create
   * an empty updates object which will be used to push the 
   * chatroomdata to Firebase. Then push the chatdata to the
   * updates -object and finally push the data to Firebase.
   */
  socket.on('newroom', (data) => {
    if (data) {
      socket.join(data.title);
      var newChatKey = db.ref('chat').push().key;
      var updates = {};
      updates['/chat/' + newChatKey] = data;
      updates['/users/' + data.admin + '/rooms/' + newChatKey] = data.title;
      firebase.database().ref().update(updates);
    }
  });

  /**
   * When a user sends the updatenick event from the client,
   * 
   */
  socket.on('updatenick', (data) => {
    var updates = {};
    updates['/users/' + data.userid + '/nickname'] = data.nick;
    firebase.database().ref().update(updates);
  });


  /**
   * Client can join different channels using the 
   * subscribe method on the client side. It triggers
   * the socket.join -method on the server side.
   *
   * TODO:
   *  - Fix this so that rooms can actually be left.
   *    Use the subscribe method below as an example
   *    of how to retrieve the chatkey correctly.
   */

  socket.on('unsubscribe', (data) => {
    var chatKey = null;
    var updates = {};
    if (chatKey) {
      updates['/users/' + data.uid + '/rooms/' + chatKey] = null;
      socket.leave(data.room);
    } else {
      console.log('couldn\'t leave room');
    }
  });

  /**
   * This is called when a user wants to join a room.
   *
   * First create an empty updates object, that will
   * store the info about the subscribed room that'll 
   * be added to the user's data in firebase.
   *
   * Then, loop through the chat's to figure out the 
   * corresponding roomID for the desired room's name.
   *
   * If this is found, update the roomdata to the user's
   * subscribed rooms and join the chatroom.
   *
   * If the key cannot be found, print out an error.
   */
  socket.on('subscribe', (data) => {
    var updates = {};
    db.ref('chat').once('value').then( (snapshot) => {
      snapshot.forEach( (chat) => {
        if (chat.val().title === data.room) {

          updates['/users/' 
            + data.uid 
            + '/rooms/'
            + chat.key] = data.room;

          db.ref().update(updates);

          socket.join(data.room);
        }
      });
    }, (error) => {
      console.log('Couldnt join room: ' + error);
    });
  });

  /**
   * Handle sent messages. 
   *
   * If the message begins with a command,
   * handle it accordingly. (etc display help
   * or change nickname)
   *
   * In the event of 'chatmessage', 
   * emit that message to everyone.
   *
   * The timestamp is added to the message in the
   * server, everything else is provided by the client.
   */
  socket.on('chatmessage', (msg) => {
    console.log(msg.nick + '@' + msg.room + ': ' + msg.message);
    var data = msg;
    data['timestamp'] = createTimestamp();
    io.to(data.room).emit('chatmessage', data);
  });

  /**
   * Handle disconnection
   */
  socket.on('disconnect', () => {
    console.log('Client disconnected');
  });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
